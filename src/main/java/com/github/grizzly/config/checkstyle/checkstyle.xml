<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <module name="NewlineAtEndOfFile">
        <property name="severity" value="ignore"/>
    </module>

    <module name="RegexpSingleline">
        <!-- Checks that is not used in comments-->
        <property name="format" value="((//.*)|(\*.*))FIXME"/>
        <property name="message" value='TODO is preferred to FIXME.'/>
        <property name="severity" value="warning"/>
    </module>


    <module name="TreeWalker">

        <!--IMPORT CHECKS-->

        <module name="RedundantImport">
            <!-- Checks for redundant import statements. -->
            <property name="severity" value="error"/>
        </module>

        <module name="ImportOrder">
            <!--This config matches default IntelliJ IDEA formatter-->

            <!--group of static imports is on the bottom-->
            <!--groups of non-static imports: all imports except of "javax" and "java", then "javax" and "java"-->
            <!--imports will be sorted in the groups-->
            <!--groups are separated by, at least, one blank line and aren't separated internally-->

            <property name="groups" value="*,javax,java"/>
            <property name="ordered" value="false"/>
            <property name="separated" value="false"/>
            <property name="option" value="bottom"/>
        </module>

        <!--<module name="AvoidStarImport">-->
        <!--<property name="severity" value="warning"/>-->
        <!--</module>-->

        <module name="UnusedImports"/>

        <!--DOCUMENTS STYLE-->

        <!--        <module name="JavadocStyle">-->
        <!--            <property name="severity" value="warning"/>-->
        <!--        </module>-->

        <!--        <module name="JavadocMethod">-->
        <!--            <property name="severity" value="warning"/>-->
        <!--        </module>-->

        <!--        <module name="JavadocType">-->
        <!--            <property name="severity" value="warning"/>-->
        <!--        </module>-->

        <!--        <module name="JavadocVariable">-->
        <!--            <property name="severity" value="warning"/>-->
        <!--        </module>-->

        <!--NAMING CHECKS-->

        <module name="PackageName">
            <!-- Validates identifiers for package names against the supplied expression. -->
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="TypeNameCheck">
            <!-- Validates static, final fields against the expression "^[A-Z][a-zA-Z0-9]*$". -->
            <metadata name="altname" value="TypeName"/>
            <property name="severity" value="error"/>
        </module>

        <module name="ConstantNameCheck">
            <!-- Validates non-private, static, final fields against the supplied
        public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
            <metadata name="altname" value="ConstantName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="false"/>
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
            <message key="name.invalidPattern"
                     value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
            <property name="severity" value="error"/>
        </module>

        <module name="StaticVariableNameCheck">
            <!-- Validates static, non-final fields against the supplied
        expression "^[a-z][a-zA-Z0-9]*_?$". -->
            <metadata name="altname" value="StaticVariableName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="MethodNameCheck">
            <!-- Validates identifiers for method names. -->
            <metadata name="altname" value="MethodName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="ParameterName">
            <!-- Validates identifiers for method parameters against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>

        <module name="LocalFinalVariableName">
            <!-- Validates identifiers for local final variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>

        <module name="LocalVariableName">
            <!-- Validates identifiers for local variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>

        <!--LENGTH and CODING CHECKS-->

        <module name="LineLength">
            <property name="max"
                      value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}"
                      default="250"/>
            <property name="severity" value="error"/>

            <!--The default ignore pattern exempts the following elements:
                 - import statements
                 - long URLs inside comments
            -->

            <property name="ignorePattern"
                      value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}"
                      default="^(package .*;\s*)|(import .*;\s*)|( *\* *https?://.*)$"/>
        </module>

        <module name="LeftCurly">
            <!-- Checks for placement of the left curly brace ('{'). -->
            <property name="severity" value="error"/>
        </module>

        <module name="RightCurly">
            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
                the same line. e.g., the following example is fine:
                <pre>
                    if {
                    ...
                    } else
                </pre>
            -->
            <!-- This next example is not fine:
            <pre>
                if {
                    ...
                    }
                else
            </pre>
       -->
            <property name="option" value="same"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks for braces around if and else blocks -->
        <module name="NeedBraces">
            <property name="severity" value="error"/>
            <property name="tokens"
                      value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
        </module>

        <module name="UpperEll">
            <!-- Checks that long constants are defined with an upper ell.-->
            <property name="severity" value="error"/>
        </module>

        <module name="FallThrough">
            <!-- Warn about falling through to the next case statement.  Similar to
                javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
                on the last non-blank line preceding the fallen-into case contains 'fall through' (or
                some other variants which we don't publicized to promote consistency).
            -->
            <property name="reliefPattern"
                      value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
            <property name="severity" value="error"/>
        </module>

        <module name="AnnotationUseStyle">
            <property name="severity" value="error"/>
        </module>

        <module name="ArrayTypeStyle">
            <property name="severity" value="error"/>
        </module>

        <module name="AvoidNestedBlocks">
            <property name="severity" value="error"/>
        </module>

        <module name="CovariantEquals">
            <property name="severity" value="error"/>
        </module>

        <module name="DeclarationOrder">
            <property name="severity" value="error"/>
        </module>

        <module name="DefaultComesLast">
            <property name="severity" value="error"/>
        </module>

        <module name="EmptyStatement">
            <property name="severity" value="error"/>
        </module>

        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="1"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="NeedBraces">
            <property name="severity" value="error"/>
        </module>

        <module name="PackageDeclaration"/>

        <module name="BooleanExpressionComplexity">
            <property name="max" value="10"/>
            <property name="severity" value="error"/>
        </module>

        <module name="CyclomaticComplexity">
            <property name="max" value="10"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="NPathComplexity">
            <property name="max" value="200"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="ModifierOrder">
            <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
            8.4.3.  The prescribed order is:
            public, protected, private, abstract, static, final, transient, volatile,
            synchronized, native, strictfp
            -->
        </module>

        <!--WHITESPACE CHECKS-->

        <module name="WhitespaceAround">
            <!-- Checks that various tokens are surrounded by whitespace.
                This includes most binary operators and keywords followed
                by regular or curly braces.
            -->

            <!-- ASSIGN - " = "
                 ARRAY_INIT - " {"
                 BAND - " & "
                 BAND_ASSIGN-
                 BOR - " | "
                 DIV - " / "
                 GENERIC_START - " < "
                 GENERIC_END - " > "
                 ELLIPSIS
                 ARRAY_INIT
            -->

            <property name ="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR,
                             BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV,
                             DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND, LCURLY,
                             LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                             LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH,
                             LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT,
                             MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS,
                             PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                             SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND,
                             WILDCARD_TYPE"
            />
            <property name="severity" value="error"/>
        </module>

        <module name="WhitespaceAfter">
            <!-- Checks that commas, semicolons and typecasts are followed by
              whitespace.
              -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
            <property name="severity" value="error"/>
        </module>

        <module name="NoWhitespaceAfter">
            <!-- Checks that there is no whitespace after various unary operators.
                Linebreaks are allowed.
            -->
            <property name="tokens"
                      value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>

        <module name="NoWhitespaceBefore">
            <!-- Checks that there is no whitespace before various unary operators.
                Linebreaks are allowed.
            -->
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>

        <module name="ParenPad">
            <!-- Checks that there is no whitespace before close parens or after
                open parens.
            -->
            <property name="severity" value="error"/>
        </module>

        <module name = "EmptyLineSeparator" />
        <module name = "EmptyLineSeparator">
            <property name = "allowMultipleEmptyLines" value = "false" />
            <property name = "allowMultipleEmptyLinesInsideClassMembers" value = "false" />
        </module>
    </module>
</module>